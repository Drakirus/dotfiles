set nocompatible

call plug#begin('~/.vim/autoload')

Plug 'tpope/vim-sensible'

" -------------------
" A collection of +70 language packs for Vim
" -------------------
Plug 'sheerun/vim-polyglot'
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ["ruby", "C=c", "c", "bash=sh", "sh", "html", "css", "vim", "python"]

" -------------------
" leader m to expand a split
" -------------------
Plug 'blarghmatey/split-expander'

" -------------------
" A Vim plugin which shows a git diff in the numberline
" -------------------
Plug 'airblade/vim-gitgutter'

" Insert or delete brackets
Plug 'jiangmiao/auto-pairs'

" -------------------
" . command after a plugin map
" -------------------
Plug 'tpope/vim-repeat'

" -------------------
" change surround cs"'
" -------------------
Plug 'tpope/vim-surround'

" -------------------
" https://languagetool.org/fr/
" -------------------
Plug 'rhysd/vim-grammarous'
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs)
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
endfunction

function! g:grammarous#hooks.on_reset(errs)
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
endfunction

" -------------------
" Replace + motion
" -------------------
Plug 'vim-scripts/ReplaceWithRegister'
" gr replace motion

" -------------------
" Aligning text
" -------------------
Plug 'junegunn/vim-easy-align'
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" -------------------
" Always highlight enclosing tags
" -------------------
Plug 'Valloric/MatchTagAlways'

" -------------------
" Commanter
" -------------------
Plug 'scrooloose/nerdcommenter'
let NERDUsePlaceHolders=0
let NERDSpaceDelims=1
let g:NERDCustomDelimiters = {
    \ 'c': { 'left' : '//', 'leftAlt' : '/*', 'rightAlt': '*/' }
\ }

" -------------------
" NERDTree
" -------------------
" git status flags
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }
Plug 'scrooloose/nerdtree', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }
map <leader>n :NERDTreeToggle<CR>
map <leader>k :NERDTreeFind<cr>
let NERDTreeMapActivateNode='<space>'
let NERDTreeMapOpenInTab='<ENTER>'
let NERDTreeIgnore = ['\.pyc$','\.o$', '\~$', '\.db$', '\.sqlite$', '__pycache__']
let NERDTreeShowHidden=1

" icons need to patch fonts
Plug 'ryanoasis/vim-devicons', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }
" let g:WebDevIconsUnicodeDecorateFolderNodes = 1
" let g:WebDevIconsUnicodeGlyphDoubleWidth = 0

" -------------------
" syntastic
" -------------------
Plug 'scrooloose/syntastic'

" configure syntastic syntax checking to check on open as well as save
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height=5

" -------------------
" THEME-SYNTAX
" -------------------
"Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
let g:gruvbox_contrast_dark="medium"
let g:gruvbox_contrast_light="medium"

let g:gruvbox_sign_column="dark0"
let g:gruvbox_color_column="dark0"
let g:gruvbox_vert_split="dark0"

" tmux-navigator configuration
Plug 'christoomey/vim-tmux-navigator'

" -------------------
" tabline for vim (powerline)
" -------------------
Plug 'bling/vim-airline'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space="\ua0"
let g:airline_theme='gruvbox'
set t_Co=256
let &t_EI = "\<Esc>[2 q"

au BufNewFile,BufRead *.md silent call airline#extensions#whitespace#toggle()

" Set cursor to vertical line when in insert mode.
if exists('$TMUX')
  let &t_SI="\ePtmux;\e\e[6 q\e\\"
  let &t_EI="\ePtmux;\e\e[2 q\e\\"
endif
set guicursor=a:blinkon0

" -------------------
" <leader>u for git like undo
" -------------------
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
nnoremap <leader>u :UndotreeToggle<cr>
let g:undotree_WindowLayout = 2

" TAGS
" install exuberant-ctags
Plug 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>
let g:tagbar_compact = 1



" -------------------
" AUTO-complete
" -------------------

" Plug 'ajh17/VimCompletesMe'
" let g:vcm_direction = 'n'
" let b:vcm_tab_complete = 'tags'

" OR

Plug 'Shougo/neocomplete.vim'
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#auto_completion_start_length = 1
let g:neocomplete#lock_buffer_name_pattern = '\*kj\*'
let g:neocomplete#enable_fuzzy_completion = 1
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" -------------------
"  Snippets
" -------------------
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine.
Plug 'honza/vim-snippets'

" 'SirVer/ultisnips' options.
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger  = "<leader><TAB>"

" Enable heavy omni completion.
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

" ----------------------------- END -----------------------------
call plug#end()
