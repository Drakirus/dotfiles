set nocompatible

filetype off

call plug#begin('~/.vim/autoload')

Plug 'tpope/vim-sensible'

" -------------------
" leader m to expand a split
" -------------------
Plug 'blarghmatey/split-expander'

" -------------------
" A Vim plugin which shows a git diff in the numberline
" -------------------
Plug 'airblade/vim-gitgutter'

" Insert or delete brackets
Plug 'jiangmiao/auto-pairs'

" -------------------
" . command after a plugin map
" -------------------
Plug 'tpope/vim-repeat'

" -------------------
" change surround cs"'
" -------------------
Plug 'tpope/vim-surround'

" -------------------
" https://languagetool.org/fr/
" -------------------
Plug 'rhysd/vim-grammarous'
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs)
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
endfunction

function! g:grammarous#hooks.on_reset(errs)
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
endfunction

" -------------------
" Vim Markdown pandoc
" -------------------
Plug 'vim-pandoc/vim-pandoc-syntax'
augroup pandoc_syntax
  au! BufNewFile,BufFilePRe,BufRead *.md set filetype=markdown.pandoc
augroup END

let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "C=c", "c", "bash=sh", "sh", "html", "css", "vim", "python"]

" -------------------
" Replace + motion
" -------------------
Plug 'vim-scripts/ReplaceWithRegister'
" gr replace motion

" -------------------
" Motion in indent
" -------------------
Plug 'michaeljsmith/vim-indent-object'
" Indent ii

" -------------------
" EasyMotion
" -------------------
Plug 'joequery/Stupid-EasyMotion'
map <leader>j <Leader><Leader>w

" -------------------
" Aligning text
" -------------------
Plug 'junegunn/vim-easy-align'
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" -------------------
" Always highlight enclosing tags
" -------------------
Plug 'Valloric/MatchTagAlways'

" -------------------
" Gist in Vim
" -------------------
Plug 'mattn/gist-vim' |  Plug 'mattn/webapi-vim'
let g:gist_open_browser_after_post = 1

" Ag searcher
Plug 'rking/ag.vim'
nnoremap <Leader>K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

" -------------------
" Commanter
" -------------------
Plug 'scrooloose/nerdcommenter'

" -------------------
" NERDTree
" -------------------
" git status flags
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }
Plug 'scrooloose/nerdtree', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }
map <leader>n :NERDTreeToggle<CR>
map <leader>k :NERDTreeFind<cr>
let NERDTreeMapActivateNode='<space>'
let NERDTreeMapOpenInTab='<ENTER>'
let NERDTreeIgnore = ['\.pyc$','\.o$', '\~$', '\.db$', '\.sqlite$', '__pycache__']
let NERDTreeShowHidden=1

" -------------------
" syntastic
" -------------------
Plug 'scrooloose/syntastic'

" configure syntastic syntax checking to check on open as well as save
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height=5

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn


" -------------------
" THEME-SYNTAX  Color solarized
" -------------------
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'

" Haml, Sass, Scss, js
Plug 'jelera/vim-javascript-syntax'
Plug 'tpope/vim-haml'

" icons need to patch fonts
Plug 'ryanoasis/vim-devicons', { 'on':  [ 'NERDTreeToggle' , 'NERDTreeFind'] }

" tmux-navigator configuration
Plug 'christoomey/vim-tmux-navigator'

" -------------------
" tabline for vim (powerline)
" -------------------
Plug 'vim-airline/vim-airline-themes'

Plug 'bling/vim-airline'
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_theme         = 'gruvbox'
set t_Co=256
au BufNewFile,BufRead *.md silent call airline#extensions#whitespace#toggle()


" -------------------
" <F5> for git like undo
" -------------------
Plug 'sjl/gundo.vim', { 'on':  'GundoToggle' }
nnoremap <F5> :GundoToggle<CR>
let g:gundo_width = 50


" TAGS
" sudo apt-get install exuberant-ctags
Plug 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>
let g:tagbar_compact = 1


" -------------------
" AUTO-complete
" -------------------
if !has("python")

  "echo 'python NOT loaded'

  Plug 'ajh17/VimCompletesMe'
  let g:vcm_direction = 'n'
  let b:vcm_tab_complete = 'tags'

  finish

endif

Plug 'Shougo/neocomplete.vim'

" 'Shougo/neocomplete' options.

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#auto_completion_start_length = 1
"let g:neocomplete#lock_buffer_name_pattern = '\*kj\*'
" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
  "let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"


" -------------------
"  Snippets
" -------------------
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine.
Plug 'honza/vim-snippets'

" 'SirVer/ultisnips' options.
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger  = "<leader><TAB>"

" Enable heavy omni completion.
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif


" ----------------------------- END -----------------------------
call plug#end()
filetype on
